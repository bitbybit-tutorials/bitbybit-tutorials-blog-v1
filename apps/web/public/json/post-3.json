{
  "category": [
    "React Native"
  ],
  "created": "07-02-2022",
  "id": 4,
  "image": "test.png",
  "title": "React Native Push Notifications with Airship - Part 2 - Send Notifications Programmatically",
  "type": "post",
  "slug": "post-3",
  "compiledSource": {
    "compiledSource": "var m=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var i=(e,t,r)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,o=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&i(e,r,t[r]);if(a)for(var r of a(t))p.call(t,r)&&i(e,r,t[r]);return e},g=(e,t)=>d(e,u(t));var h=(e,t)=>{var r={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&a)for(var n of a(e))t.indexOf(n)<0&&p.call(e,n)&&(r[n]=e[n]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var n=r,{components:e}=n,t=h(n,[\"components\"]);return mdx(MDXLayout,g(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Next.js has two forms of pre-rendering: \",mdx(\"strong\",{parentName:\"p\"},\"Static Generation\"),\" and \",mdx(\"strong\",{parentName:\"p\"},\"Server-side Rendering\"),\". The difference is in \",mdx(\"strong\",{parentName:\"p\"},\"when\"),\" it generates the HTML for a page.\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Static Generation\"),\" is the pre-rendering method that generates the HTML at \",mdx(\"strong\",{parentName:\"li\"},\"build time\"),\". The pre-rendered HTML is then \",mdx(\"em\",{parentName:\"li\"},\"reused\"),\" on each request.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Server-side Rendering\"),\" is the pre-rendering method that generates the HTML on \",mdx(\"strong\",{parentName:\"li\"},\"each request\"),\".\")),mdx(\"p\",null,\"Importantly, Next.js lets you \",mdx(\"strong\",{parentName:\"p\"},\"choose\"),' which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.'),mdx(\"p\",null,\"This is an example post. There's another one \",mdx(\"a\",o({parentName:\"p\"},{href:\"/posts/example-post\"}),\"here\"),\".\"))}MDXContent.isMDXComponent=!0;\n",
    "scope": {
      "category": [
        "React Native"
      ],
      "created": "07-02-2022",
      "id": 4,
      "image": "test.png",
      "title": "React Native Push Notifications with Airship - Part 2 - Send Notifications Programmatically",
      "type": "post"
    }
  },
  "rawSource": "\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n\nThis is an example post. There's another one [here](/posts/example-post).\n"
}